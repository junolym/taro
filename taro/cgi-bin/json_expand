#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

from lib.taro_comm import *
import json
import copy
import pandas as pd


def flatten_json(y):
    out = {}

    def flatten(x, name=''):
        if type(x) is dict:
            for i in x:
                flatten(x[i], f'{name}.{i}')

        else:
            out[name[1:]] = x

    flatten(y)
    return out


def expand_json(s):
    s = [flatten_json(x) for x in s]
    while True:
        has_list = False
        new_out = []
        for j in s:
            j = flatten_json(j)
            for k, v in j.items():
                if type(v) is list:
                    has_list = True
                    for i in range(len(v)):
                        new_j = j
                        new_j[k] = v[i]
                        new_j = flatten_json(new_j)
                        new_out.append(new_j)
                    break
        if not has_list:
            break
        s = new_out

    return s


def to_csv(s, use_tab=False):
    data = pd.DataFrame(s)
    if use_tab:
        return data.to_csv(index=False, sep='\t')
    return data.to_csv(index=False)


@cgi_entry_plain
def process(input_str, inputs, output_type='json', **req):
    s = []
    try:
        j = json.loads(input_str)
        if type(j) is list:
            s = j
        else:
            s.append(j)
    except:
        for x in inputs:
            j = json.loads(x)
            s.append(j)
    s = expand_json(s)
    if output_type == 'table':
        return to_csv(s, True)
    elif output_type == 'csv':
        return to_csv(s, False)
    elif output_type == 'json':
        return '\n'.join([json.dumps(x, ensure_ascii=False) for x in s])


if __name__ == '__main__':
    process()
